package main

import (
	"crypto/tls"
	"crypto/x509"
	"flag"
	"io/ioutil"
	"regexp"

	"github.com/elazarl/goproxy"
)

type Settings struct {
	Addr              string
	HostRex           regexp.Regexp
	Verbose           bool
	LogRequests       bool
	LogResponses      bool
	DuplicateRequests bool
	TestDecoding      bool
}

func (s *Settings) Load() error {
	verbose := flag.Bool("v", false, "should every proxy request be logged to stdout")
	logRequests := flag.Bool("logRequests", false, "logs all requests if true")
	logResponses := flag.Bool("logResponses", false, "logs all responses if true")
	hostRegex := flag.String("hostRegex", ".*", "regex to filter hosts that are processed")
	addr := flag.String("addr", ":8080", "proxy listen address")
	duplicateRequests := flag.Bool("duplicateRequests", false, "duplicate all requests")
	testDecoding := flag.Bool("testDecoding", false, "test decoding cookies, headers, and other data in requests")
	flag.Parse()

	hostRex, err := regexp.Compile(*hostRegex)
	if err != nil {
		return err
	}

	caCert, err := ioutil.ReadFile("cert.pem")
	if err != nil {
		return err
	}

	caKey, err := ioutil.ReadFile("key.pem")
	if err != nil {
		return err
	}

	err = s.setCA(caCert, caKey)
	if err != nil {
		return err
	}

	s.Addr = *addr
	s.HostRex = *hostRex
	s.Verbose = *verbose
	s.LogRequests = *logRequests
	s.LogResponses = *logResponses
	s.DuplicateRequests = *duplicateRequests
	s.TestDecoding = *testDecoding

	return nil
}

func (s *Settings) setCA(caCert, caKey []byte) error {
	goproxyCa, err := tls.X509KeyPair(caCert, caKey)
	if err != nil {
		return err
	}

	goproxyCa.Leaf, err = x509.ParseCertificate(goproxyCa.Certificate[0])
	if err != nil {
		return err
	}

	goproxy.GoproxyCa = goproxyCa

	goproxy.OkConnect = &goproxy.ConnectAction{
		Action:    goproxy.ConnectAccept,
		TLSConfig: goproxy.TLSConfigFromCA(&goproxyCa),
	}
	goproxy.MitmConnect = &goproxy.ConnectAction{
		Action:    goproxy.ConnectMitm,
		TLSConfig: goproxy.TLSConfigFromCA(&goproxyCa),
	}
	goproxy.HTTPMitmConnect = &goproxy.ConnectAction{
		Action:    goproxy.ConnectHTTPMitm,
		TLSConfig: goproxy.TLSConfigFromCA(&goproxyCa),
	}
	goproxy.RejectConnect = &goproxy.ConnectAction{
		Action:    goproxy.ConnectReject,
		TLSConfig: goproxy.TLSConfigFromCA(&goproxyCa),
	}

	return nil
}
