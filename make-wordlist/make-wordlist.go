package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"

	mapset "github.com/deckarep/golang-set"
)

func bailOnError(err error) {
	if err != nil {
		panic(err)
		log.Fatal(err)
	}
}

func getUrls(filepath string) chan string {
	c := make(chan string)

	wordlistBytes, err := ioutil.ReadFile("wordlists.txt")
	bailOnError(err)
	urls := strings.Split(string(wordlistBytes), "\n")

	go func() {
		defer close(c)
		for _, url := range urls {
			if url != "" {
				c <- url
			}
		}
	}()

	return c
}

func getLinesFromUrl(url string) chan string {
	c := make(chan string)

	res, err := http.Get(url)
	bailOnError(err)

	if res.StatusCode != 200 {
		// handle error
	}

	defer res.Body.Close()
	data, err := ioutil.ReadAll(res.Body)
	bailOnError(err)

	dataStr := string(data)
	dataStr = strings.Replace(dataStr, "\r", "", -1)
	lines := strings.Split(dataStr, "\n")

	go func() {
		defer close(c)
		for _, line := range lines {
			c <- line
		}
	}()

	return c
}

func getLinesFromUrls(urls chan string) chan string {
	c := make(chan string)

	go func() {
		defer close(c)
		for url := range urls {
			lines := getLinesFromUrl(url)
			for line := range lines {
				c <- line
			}
		}
	}()

	return c
}

func removeLeadingCharacter(s, c string) string {
	if strings.HasPrefix(s, c) {
		s = strings.Replace(s, c, "", 1)
	}

	return s
}

func normalizePaths(paths chan string) chan string {
	c := make(chan string)

	badLeadingCharacters := []string{"/", "~", "!", "*", "[", "]", "^"}

	go func() {
		defer close(c)
		for path := range paths {
			for _, character := range badLeadingCharacters {
				path = removeLeadingCharacter(path, character)
			}

			// Add the string if it does not start with '.'
			if !strings.HasPrefix(path, ".") {
				c <- path
			}
		}
	}()

	return c
}

func main() {
	pathSet := mapset.NewSet()

	urls := getUrls("wordlists.txt")
	lines := getLinesFromUrls(urls)
	normalized := normalizePaths(lines)

	for line := range normalized {
		pathSet.Add(line)
	}

	for path := range pathSet.Iter() {
		fmt.Println(path.(string))
	}
}
