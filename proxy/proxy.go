package main

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/elazarl/goproxy"
)

type Proxy struct {
	reqHandler RequestHandler
	resHandler ResponseHandler
}

func (p *Proxy) ListenAndServe() {
	settings := Settings{}
	err := settings.Load()
	if err != nil {
		log.Fatal(err)
	}

	proxy := goproxy.NewProxyHttpServer()
	proxy.OnRequest().HandleConnect(goproxy.AlwaysMitm)

	proxy.OnRequest().DoFunc(func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
		req, res, err := p.reqHandler.Process(r, ctx, &settings)
		if err != nil {
			log.Fatal(err)
		}

		return req, res
	})

	proxy.OnResponse().DoFunc(func(r *http.Response, ctx *goproxy.ProxyCtx) *http.Response {
		res, err := p.resHandler.Process(r, ctx, &settings)
		if err != nil {
			log.Fatal(err)
		}

		return res
	})

	proxy.Verbose = settings.Verbose
	fmt.Printf("[+] Proxy started at %s.\n", time.Now().String())
	log.Fatal(http.ListenAndServe(settings.Addr, proxy))
}
